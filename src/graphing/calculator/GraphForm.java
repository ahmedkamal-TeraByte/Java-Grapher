/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphing.calculator;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.*;

import net.objecthunter.exp4j.Expression;
import net.objecthunter.exp4j.ExpressionBuilder;

/**
 *
 * @author ahmed_kamal
 */
public class GraphForm extends javax.swing.JFrame {

    /**
     * Creates new form GraphForm
     */
    public Point origin;
     
    private ArrayList<String> equations;
    HashMap<String,ArrayList<Point>> equationPoints;
    public GraphForm() {
        initComponents();
        origin = new Point(200,200);
        equations=new ArrayList<String>();
        equationPoints=new HashMap<String,ArrayList<Point>>();
        DefaultListModel<String> model= new DefaultListModel<String>();
//        model.add(0, "item1");
//        model.add(1, "item2");
//        model.add(2, "item3");
//        model.add(3, "item4");
//        model.add(4, "item5");
//        
        equationsList.setModel(model);
//        Graphics internalGraphics= internalFrame.getGraphics();
//        internalGraphics.drawRect(0, 0, 100, 100);
    }

    /**
     *
     * @param g
     */
    @Override
    public void paint(Graphics g)
    {
        this.paintComponents(g);
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionsPanel = new javax.swing.JPanel();
        polynomialField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        drawGraphButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        equationsList = new javax.swing.JList<>();
        graphPanel = new InternalPanel();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(null);
        setMinimumSize(null);
        setName("Graph"); // NOI18N
        setPreferredSize(new java.awt.Dimension(650, 420));
        setResizable(false);
        setSize(new java.awt.Dimension(650, 420));

        optionsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        optionsPanel.setMaximumSize(new java.awt.Dimension(215, 400));
        optionsPanel.setMinimumSize(new java.awt.Dimension(215, 400));

        polynomialField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel1.setText("Enter a Polynomial:");

        drawGraphButton.setText("Draw Graph");
        drawGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawGraphButtonActionPerformed(evt);
            }
        });

        equationsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        equationsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        equationsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                equationsListMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(equationsList);

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(polynomialField)
                            .addGroup(optionsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 109, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(drawGraphButton))))
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(polynomialField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(drawGraphButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(179, Short.MAX_VALUE))
        );

        graphPanel.setBackground(new java.awt.Color(255, 255, 255));
        graphPanel.setMaximumSize(new java.awt.Dimension(400, 400));
        graphPanel.setMinimumSize(new java.awt.Dimension(400, 400));
        graphPanel.setPreferredSize(new java.awt.Dimension(400, 400));

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void equationsListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_equationsListMousePressed
        // TODO add your handling code here:
        if (evt.getButton()==3) {
                JPopupMenu menu = new JPopupMenu();
                
                JMenuItem item = new JMenuItem("Drop");
                item.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        dropPolynomial();
                    }
                });
                menu.add(item);
                menu.show(equationsList, 10, equationsList.getCellBounds(equationsList.getSelectedIndex()+1,
                        equationsList.getSelectedIndex()).y+15);
            }
    }//GEN-LAST:event_equationsListMousePressed

    private void drawGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawGraphButtonActionPerformed
        // TODO add your handling code here:
        addEquationInList();
        
    }//GEN-LAST:event_drawGraphButtonActionPerformed

    private void dropPolynomial()
    {
        String equation=equationsList.getSelectedValue();
        int index=equationsList.getSelectedIndex();
        DefaultListModel<String> model= (DefaultListModel<String>) equationsList.getModel();
        model.remove(equationsList.getSelectedIndex());
        equationsList.setModel(model);
        equations.remove(index);
        equationPoints.remove(equation);
        graphPanel.repaint();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                drawGraph();
            }
        });
                        
    }
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(GraphForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(GraphForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(GraphForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GraphForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new GraphForm().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton drawGraphButton;
    private javax.swing.JList<String> equationsList;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JTextField polynomialField;
    // End of variables declaration//GEN-END:variables

    private void addEquationInList() {
        String equation=polynomialField.getText();
        ArrayList<Point> points= new ArrayList<Point>();
        if(equation!="")
        {
            
            points=getPoints(equation);
            if(points!=null)
            {
                equations.add(equation);
                equationPoints.put(equation, points);
                DefaultListModel<String> model=(DefaultListModel<String>) equationsList.getModel();
                model.addElement(equation);
                equationsList.setModel(model);
                polynomialField.setText("");
                drawGraph();
            }
        }
    }

    private void drawGraph() {
        Graphics g=graphPanel.getGraphics();
        for(String equation: equations)
        {
            ArrayList<Point> points=equationPoints.get(equation);
            if(points.size()>0)
            {
                Point point1,point2;
                for(int i=0;i<points.size()-1;i++)
                {
                    point1=getGraphPoint(points.get(i));
                    point2=getGraphPoint(points.get(i+1));
                    g.drawLine(point1.x, point1.y, point2.x, point2.y);
                }
            }
        }
    }
    
    private ArrayList<Point> getPoints(String equation)
    {
        ArrayList<Point> points= new ArrayList<Point>();
        for(int i=-200;i<200;i++)
        {
            try
            {
            Expression e = new ExpressionBuilder(equation)
                    .variables("x")
                    .build()
                    .setVariable("x", i);
            double result = e.evaluate();
            points.add(new Point(i, (int) result));
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Exception", JOptionPane.ERROR_MESSAGE);
                return null;
            }
        }
        return points;
    }

    private Point getGraphPoint(Point point) {
        return new Point(point.x+origin.x,point.y+origin.y);
    }
}
